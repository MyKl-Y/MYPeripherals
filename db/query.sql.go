// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

// db/query.sql.go

package db

import (
	"context"
)

const createMetrics = `-- name: CreateMetrics :one
INSERT INTO metrics (
    keypresses, mouse_clicks, mouse_distance_in, mouse_distance_mi, scroll_steps
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, keypresses, mouse_clicks, mouse_distance_in, mouse_distance_mi, scroll_steps, timestamp
`

type CreateMetricsParams struct {
	Keypresses      int32
	MouseClicks     int32
	MouseDistanceIn float64
	MouseDistanceMi float64
	ScrollSteps     int32
}

func (q *Queries) CreateMetrics(ctx context.Context, arg CreateMetricsParams) (Metric, error) {
	row := q.db.QueryRowContext(ctx, createMetrics,
		arg.Keypresses,
		arg.MouseClicks,
		arg.MouseDistanceIn,
		arg.MouseDistanceMi,
		arg.ScrollSteps,
	)
	var i Metric
	err := row.Scan(
		&i.ID,
		&i.Keypresses,
		&i.MouseClicks,
		&i.MouseDistanceIn,
		&i.MouseDistanceMi,
		&i.ScrollSteps,
		&i.Timestamp,
	)
	return i, err
}

// Query for creating a keypress detail record
const createKeypressDetail = `-- name: CreateKeypressDetail :exec
INSERT INTO keypress_details (key, count)
VALUES ($1, $2)
`

type CreateKeypressDetailParams struct {
	Key   uint16 //string
	Count int32
}

func (q *Queries) CreateKeypressDetail(ctx context.Context, arg CreateKeypressDetailParams) (KeypressDetail, error) {
	row := q.db.QueryRowContext(ctx, createKeypressDetail, arg.Key, arg.Count)

	var i KeypressDetail

	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Count,
		&i.Timestamp,
	)

	return i, err
}